/nfs/school/courses/complete/matlab
    ./10/robsdiary
    ./10/kamini10-30
    ./11/robsdiary


numerical integration options
    /nfs/school/courses/complete/matlab/lecture/12/pdex1.m

    quad (Simpson/Riemann)



% quad is for definite integrals...  needs limits
% limits being the range...
% to integrate x^2...
y=@(x)x.^2;  % this is the function
quad(y,0,1);  % integrating x^2 from 0 to 1
quad(y,0,1)  % integrating x^2 from 0 to 1

ans =

    0.3333


help dblquad
 DBLQUAD Numerically evaluate double integral. 
    Q = DBLQUAD(FUN,XMIN,XMAX,YMIN,YMAX) evaluates the double integral of
    FUN(X,Y) over the rectangle XMIN <= X <= XMAX, YMIN <= Y <= YMAX. FUN
    is a function handle. The function Z=FUN(X,Y) should accept a vector X
    and a scalar Y and return a vector Z of values of the integrand.
 
    Q = DBLQUAD(FUN,XMIN,XMAX,YMIN,YMAX,TOL) uses a tolerance TOL instead
    of the default, which is 1.e-6.
 
    Q = DBLQUAD(FUN,XMIN,XMAX,YMIN,YMAX,TOL,@QUADL) uses quadrature
    function QUADL instead of the default QUAD.
    Q = DBLQUAD(FUN,XMIN,XMAX,YMIN,YMAX,TOL,MYQUADF) uses your own
    quadrature function MYQUADF instead of QUAD. MYQUADF is a function
    handle. MYQUADF should have the same calling sequence as QUAD and
    QUADL. Use [] as a placeholder to obtain the default value of TOL.
    QUADGK is not supported directly as a quadrature function for 
    DBLEQUAD, but it can be called from MYQUADF.
 
    Example:
    Integrate over the square pi <= x <= 2*pi, 0 <= y <= pi:
       Q = dblquad(@(x,y)y*sin(x)+x*cos(y), pi, 2*pi, 0, pi) 
    or:
       Q = dblquad(@integrnd, pi, 2*pi, 0, pi)
    where integrnd is the M-file function:
       %-------------------------% 
       function z = integrnd(x, y)
       z = y*sin(x)+x*cos(y);  
       %-------------------------% 
 
    Note the integrand can be evaluated with a vector x and a scalar y.
 
    Nonsquare regions can be handled by setting the integrand to zero
    outside of the region.  The volume of a hemisphere is:
 
       V = dblquad(@(x,y) sqrt(max(1-(x.^2+y.^2),0)),-1,1,-1,1)
    or
       V = dblquad(@(x,y) sqrt(1-(x.^2+y.^2)).*(x.^2+y.^2<=1),-1,1,-1,1)
 
    Class support for inputs XMIN,XMAX,YMIN,YMAX and the output of FUN:
       float: double, single
 
    See also <a href="matlab:help quad">quad</a>, <a href="matlab:help quadl">quadl</a>, <a href="matlab:help quadgk">quadgk</a>, <a href="matlab:help triplequad">triplequad</a>, <a href="matlab:help trapz">trapz</a>, <a href="matlab:help function_handle">function_handle</a>.

    Reference page in Help browser
       <a href="matlab:doc dblquad">doc dblquad</a>
% dblquad is for integrating for two variables...  for example, like the rectangle in engineering
F=@(x,y)y*sin(x)+x*sin(y);
% see notes
Q=dblquad(F,pi,2*pi,0,pi)

Q =

   19.7392




% lookfor pde
./11/robsdiary


pdex1
pdetool
??? Undefined function or variable 'pdetool'.
help pde
 PDE pde demo function
pde
Error in ==> <a href="matlab: opentoline('C:\Program Files\MATLAB\R2008a\toolbox\matlab\demos\pde.m',8,0)">pde at 8</a>
help pde
 PDE pde demo function
% pdetool is cool, but not here
.          ..         diary      diary2     ert.mat    pdex1.asv  pdex1.m    
./12/diary2


function pdex1
%SOL=pdepe(m,pdefun,icfun,bcfun,xmesh,tspan)
sol=pdepe(m,@pdefun,@icfun,@bcfun,x,t);
function [c,f,s]=pdefun(x,t,u,DuDx);
./12/pdex1.m





% note that this is really useless...  this help
% does symbolic integration of integrals
int(x^3)
 
ans =
 
1/4*x^4
 
 
% note that int eliminates integration constant
int(x^3,0,1)
 
ans =
 
1/4
 
% so it does indefinite as well as definite integrals



 
% so this is a general solution
% if instead want particular, must feed initial condition

y=dsolve('Dy=x*y','y(1)=1','x')
 
y =
 
1/exp(1/2)*exp(1/2*x^2)
 
 
% now have exact solution:  note that constant is gone

% now do second order problem;  see ho(11)
Q1=dsolve('D2y+6*Dy+13*y=10*sin(5*t)','y(0)=0','Dy(0)=0','t')
 
Q1 =
 
125/174*exp(-3*t)*sin(2*t)+25/87*exp(-3*t)*cos(2*t)-10/87*sin(5*t)-25/87*cos(5*t)
 
 
pretty(simple(Q1))
 
  125                      25                      10            25
  --- exp(-3 t) sin(2 t) + -- exp(-3 t) cos(2 t) - -- sin(5 t) - -- cos(5 t)
  174                      87                      87            87
% lookfor pde
