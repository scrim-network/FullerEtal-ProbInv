see index for graphics package (bottom link on ?frame, for example)

see ./coordinates and Nathan's text scaling code in his pairs() in plotutils.R

specific

    lattice package (called trellis in R book)
        library(lattice)
        xyplot()

        is update of coplot() in base

    pairs()

    coplot() has see also for pairs():  See Crawley again
        panel.smooth() is a panel function used by both

    fourfoldplot()

general

    Nathan recommends:
        ggplot2

        layout

    very promising:
        layout() -- this is used in "The R Book" by Stephen Crawley

    fig is another option (and can even do embedded charts)
        par(fig=...)
            http://chartsgraphs.wordpress.com/2009/05/06/r-lets-you-put-chart-inside-chart/

    how to get rid of the freakish amount of space when paneling plots?
        # bottom, left, top, right
        par(mar=c(4, 3, 0, 3))
            mar
                A numerical vector of the form c(bottom, left, top, right) which gives the number of lines of margin to be specified on the four sides of the plot. The default is c(5, 4, 4, 2) + 0.1.

    mfrow/mfcol
        par("mfg") selects a sub-plot, supposedly:  does not seem to work at all, even selecting CURRENT plot
            par(mfg=c(1, 1))

    screen works similar to mfrow/mfcol
        split.screen(c(2, 2)) is similar to mfrow/mfcol
        screen(1), screen(2), etc. to select screen

    layout takes a matrix
        the matrix specifies the order in which the plots will be drawn
            0 says no plot in a specific location

        widths and heights give relative widths and heights of columns and rows
            widths=c(3, 1)
                first column is 3 times width of second

            heights=c(1, 3)
                second row is 3 times height of first

        respect can be used to make things square
            it can be either a logical, or a matrix of 0's and 1's matching the first matrix

    COMPARING
        mfrow/col
            source('plot.R')
            newDev("foo", FALSE)
            #dev.new()
            par(mfcol=c(2, 2))
            par(mar=c(4, 3, 0, 3))
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            labelPlot("c")
            par(mfg=c(2, 2))
            labelPlot("b")

        screen
            source('plot.R')
            newDev("foo", FALSE)
            #dev.new()
            split.screen(c(2, 2))
            par(mar=c(4, 3, 0, 3))
            screen(1)
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            screen(2)
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            screen(3)
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            screen(4)
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            labelPlot("a")
            screen(3)
            labelPlot("b")

        layout
            source('plot.R')
            newDev("foo", FALSE)
            #dev.new()
            nf <- layout(matrix(1:4, 2, 2, byrow=F))
            layout.show(nf)
            par(mar=c(4, 3, 0, 3))
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            labelPlot("a")

        each sub-plot is smaller in screen

        layout and mfrow/mfcol sub-plots have same size
