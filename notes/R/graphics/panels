see index for graphics package (bottom link on ?frame, for example)

see ./coordinates and Nathan's text scaling code in his pairs() in plotutils.R

specific

    lattice package (called trellis in R book)
        library(lattice)
        xyplot()

        is update of coplot() in base

    pairs()

    coplot() has see also for pairs():  See Crawley again
        panel.smooth() is a panel function used by both

    fourfoldplot()

general

    Nathan recommends:
        ggplot2

        layout

    very promising:
        layout() -- this is used in "The R Book" by Stephen Crawley

    fig is another option (and can even do embedded charts)
        par(fig=...)
            http://chartsgraphs.wordpress.com/2009/05/06/r-lets-you-put-chart-inside-chart/

            also page 859 in Crawley

    how to get rid of the freakish amount of space when paneling plots?
        # bottom, left, top, right
        par(mar=c(4, 3, 0, 3))
            mar
                A numerical vector of the form c(bottom, left, top, right) which gives the number of lines of margin to be specified on the four sides of the plot. The default is c(5, 4, 4, 2) + 0.1.

    mfrow/mfcol
        par("mfg") selects a sub-plot, supposedly:  does not seem to work at all, even selecting CURRENT plot
            par(mfg=c(1, 1))

    screen works similar to mfrow/mfcol
        split.screen(c(2, 2)) is similar to mfrow/mfcol
        screen(1), screen(2), etc. to select screen

    layout takes a matrix
        the matrix specifies the order in which the plots will be drawn
            0 says no plot in a specific location

        widths and heights give relative widths and heights of columns and rows
            widths=c(3, 1)
                first column is 3 times width of second

            heights=c(1, 3)
                second row is 3 times height of first

        respect can be used to make things square
            it can be either a logical, or a matrix of 0's and 1's matching the first matrix

    COMPARING
        mfrow/col
            source('plot.R')
            newDev("foo", FALSE)
            #dev.new()
            par(mfcol=c(2, 2))
            par(mar=c(4, 3, 0, 3))
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            labelPlot("c")
            par(mfg=c(2, 2))
            labelPlot("b")

        screen
            source('plot.R')
            newDev("foo", FALSE)

            #dev.new()

            par(mar=c(4, 3, 0, 3))
            split.screen(c(2, 2))

            screen(1)
            #par(mar=c(4, 3, 0, 3))
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")

            screen(2)
            #par(mar=c(4, 3, 0, 3))
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")

            screen(3)
            #par(mar=c(4, 3, 0, 3))
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")

            screen(4)
            #par(mar=c(4, 3, 0, 3))
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            labelPlot("a")
            screen(3)
            labelPlot("b")

        layout
            source('plot.R')
            newDev("foo", FALSE)
            #dev.new()
            nf <- layout(matrix(1:4, 2, 2, byrow=F))
            layout.show(nf)
            par(mar=c(4, 3, 0, 3))
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            emptyPlot(xlim=c(0,5), ylim=c(0,5), xlab="x label", ylab="y label")
            labelPlot("a")

        each sub-plot is smaller in screen

        layout and mfrow/mfcol sub-plots have same size

layout
    # 5 stacked plots
    layout(matrix(1:5,nrow=5,ncol=1));layout.show(5)

    layout(matrix(1:5,nrow=5,ncol=5,byrow=F));layout.show(5)
    foo <- matrix(1:5,nrow=5,ncol=5,byrow=F);foo[1, 5] <- 2;layout(foo);layout.show(5)

    why is font small on ipcc fit graph?
        print(par("ps"))

        # layout() sets cex=0.66!
        # TODO:  what else does it set??
        #par(cex=1)
        #par(ps=7)

        is this a side effect of omi?

        reset parameters with par()?
            example on manual page for par (omit read-only parameters, set new=?)

for split figures
    from axis documentation:
        outer 	a logical value indicating whether the axis should be drawn in the outer plot margin, rather than the standard plot margin.

        YES, this works
            also, title takes an outer parameter

        par(oma/omi) vs. mar
            oma is in lines
            omi is in inches

            oma/omi is outer margins, where axis and title can be put when outer==T

        see ipcc.R::ipccPlotFits()

existing stacked plots
    klausfig.R:  predict.pdf, probforce.pdf
    ipcc.R:  gcm_fit2.pdf, ipcc.R
    newfig.R:  rand4.pdf, figRandSpag()

    # x1, x2, y1, y2;  .5 to 1 is the top;  0 to 0.5 is the bottom
    predict and rand4 both use par(fig=c(0, 1, 0.5, 1)), par(fig=c(0, 1, 0, 0.5), new=T) to stack plots vertically
        par(mar=c(0, 3, 0, 1))

    probforce uses layout
        ngraphs=4
        layout(matrix(1:ngraphs, nrow=ngraphs, ncol=1))

    gcm_fit2 uses layout
        # stacked plots
        layout(matrix(1:len, nrow=len, ncol=1))
