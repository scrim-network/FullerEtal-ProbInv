set up debugger to run on stop
    options(error=recover)
        probably don't want to drop into debugger whenever error on command line
            seems to be okay:  No suitable frames for recover()

        put this in roblib.R?  options(error=recover)
            what about only putting in long runs?
                roblib.R function, recover_on_stop() ?

                call selectively from assim/predict code?
                    runnoise, runassim, runpredict

    may be too late, as was the case with the crash
        for example, if stop is called as a result of the return value from a function,
        and the function calling stop() is external to R, such as .Call("metrop")

    can instrument code to call recover(), example:
        if (!all(is.finite(foo))) {
            print("covar_ar1() is not finite")
            #browser()
            recover()
        }

run arbitrary code on stop
    options(error=expression(q("yes")))
        exits??

using recover()
    select frame, which puts you in browser()
        can save variables from brower

        c in browser returns to recover (but only if called from recover)
            DON'T USE Q -- exits all the way to top level

breakpoints
    debug(blast)
        set breakpoint on entry to blast function

    undebug(blast)
        remove breakpoint from blast function

traceback()
    is NOT saved with save.image()
